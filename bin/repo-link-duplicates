#! /usr/bin/python

import argparse
import fnmatch
import hashlib
import os

class FileInfo(object):
    def __init__(self, path):
        self.path = path
        stat = os.stat(path)
        self.dev = stat.st_dev
        self.inode = stat.st_ino
        self.size = stat.st_size
        self._sha1sum = None
        self._data = None

    def _checksums(self):
        if self._data is None:
            f = file(self.path, "r")
            data = f.read()
            f.close()
        else:
            data = self._data
        sha1 = hashlib.sha1()
        sha1.update(data)
        self._sha1sum = sha1.digest()

    @property
    def sha1sum(self):
        if self._sha1sum is None:
            self._checksums()
        return self._sha1sum

    def __eq__(self, other):
        if self.dev == other.dev and self.inode == other.inode:
            return True
        if self.dev != other.dev:
            return False
        if self.size != other.size:
            return False
        if self.sha1sum != other.sha1sum:
            return False
        else:
            if self._data is None:
                f1 = file(self.path, "r")
                self._data = f1.read()
                f1.close()
            d1 = self._data
            if other._data is None:
                f2 = file(other.path, "r")
                other._data = f2.read()
                f2.close()
            d2 = other._data
            return d1 == d2

def main():
    default_root = "/mcs/globus.org/ftppub/gt6"
    parser = argparse.ArgumentParser(
            description="Hardlink identical binary packages")
    parser.add_argument("-r", "--root", default=default_root,
            help="Root of the duplicate file search ["+default_root+"]")
    args = parser.parse_args()
    file_infos = dict()

    for dirpath, dirnames, filenames in os.walk(args.root):
        for filename in filenames:
            # We only care about the binary format files, as the metadata
            # stuff is small
            if not (fnmatch.fnmatch(filename, "*.rpm") or
                    fnmatch.fnmatch(filename, "*.deb") or
                    fnmatch.fnmatch(filename, "*.tar.gz")):
                continue

            path = os.path.join(dirpath, filename)
            fi = FileInfo(path)
            if fi.size not in file_infos:
                file_infos[fi.size] = {}
            if fi.sha1sum not in file_infos[fi.size]:
                file_infos[fi.size][fi.sha1sum] = []

            for m in file_infos[fi.size][fi.sha1sum]:
                if m.dev == fi.dev and m.inode == fi.inode:
                    # Don't bother storing multiple hard links to the same file
                    # in the list
                    fi = None
                    break
                elif m == fi:
                    os.remove(fi.path)
                    os.link(m.path, fi.path)
                    fi = None
                    break
            if fi is not None:
                file_infos[fi.size][fi.sha1sum].append(fi)

if __name__ == "__main__":
    main()
