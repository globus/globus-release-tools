#! /usr/bin/python

# Copyright 2014-2015 University of Chicago
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from __future__ import print_function

import argparse
import grp
import os
import socket
import sys

sys.path.append(os.path.join(
        os.path.dirname(sys.argv[0]),
        "..",
        "share",
        "python"))

import repo
import repo.deb
import repo.yum
import repo.zypper
import repo.package

parser = argparse.ArgumentParser(
        description="Remove packages")
parser.add_argument(
    "-r", "--root",
    help="List packages from the ROOT directory ["
            + repo.default_root + "]",
    default=repo.default_root)
parser.add_argument(
    "-p", "--package",
    help="Only list PACKAGE [all packages]")
parser.add_argument(
    "-v", "--version",
    help="Only delete a particular VERSION [all older versions]")
parser.add_argument(
    "-V", "--less-than-version",
    metavar="VERSION",
    help="Only delete older than VERSION")
parser.add_argument(
    "-d", "--dryrun",
    help="Print packages that would have been deleted",
    action='store_true')
parser.add_argument(
    "release",
    help="Delete packages in the release [unstable]",
    choices=["unstable", "testing", "stable"])

args = parser.parse_args()

releases = [args.release]

pkg_managers = [
    repo.deb.Manager(root=args.root, releases=releases),
    repo.yum.Manager(root=args.root, releases=releases),
    repo.zypper.Manager(root=args.root, releases=releases)
]

pdict = dict()
if args.version is not None:
    version = repo.package.Version(args.version)
else:
    version = None


less_than_version = None
if args.less_than_version:
    less_than_version = repo.package.Version(args.less_than_version)

for manager in pkg_managers:
    release = manager.get_release(args.release)
    all_packages = [
        src_info for src_info in release.get_packages(
            name=manager.package_name(args.package), version=version)]

    if args.version is None:
        newest_packages = [
            src_info for src_info in release.get_packages(
                name=manager.package_name(args.package),
                newest_only=True, version=version)]
        if less_than_version:
            non_newest = [
                p for p in all_packages
                if p.version < less_than_version and p not in newest_packages
            ]
        else:
            non_newest = [
                p for p in all_packages
                if p not in newest_packages
            ]
        all_packages = non_newest
    for p in all_packages:
        if args.dryrun:
            print("Would remove {}".format(p))
        else:
            release.remove_package(p)

    for p in all_packages:
        pkey = "-".join([p.name, p.version.strversion])
        if pkey not in pdict:
            pdict[pkey] = set()
        pdict[pkey].add(p.os)
