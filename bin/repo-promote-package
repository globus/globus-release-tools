#! /usr/bin/python

import argparse
import datetime
import grp
import os
import re
import socket
import sys

sys.path.append(os.path.join(
        os.path.dirname(sys.argv[0]),
        "..",
        "share",
        "python"))

import repo
import repo.deb
import repo.packages
import repo.installers
import repo.yum
import repo.zypper

parser = argparse.ArgumentParser(
        description="Promote a package to a more stable release point")
parser.add_argument(
    "-r", "--root",
    help="Synchronize packages to the ROOT directory ["
            + repo.default_root + "]",
    default=repo.default_root)
parser.add_argument(
    "-p", "--package",
    help="Only sync the latest version of PACKAGE [all new packages]")
parser.add_argument(
    "-f", "--from",
    help="Copy packages from the FROM release [unstable]",
    dest="from_release",
    choices=["unstable", "testing"],
    default="unstable")
parser.add_argument(
    "-t", "--to",
    help="Copy packages to the TO release [testing]",
    choices=["testing", "stable"],
    dest="to_release",
    default="testing")
parser.add_argument(
    "-o", "--os-name",
    help="Only process packages related to the OS_NAME. The name should be of the form os/release for an RPM distro (e.g. el/5 or sles/11) or a codename for a Deb distro (e.g. wheezy)",
    dest="os_name",
    default=None)
parser.add_argument(
    "-d", "--dryrun",
    help="Display packages that would be copied, but don't actually execute the copy",
    action='store_true')
parser.add_argument(
    "-a", "--advisory",
    help="Add new package changelogs to the ADVISORY file",
    default=None)

args = parser.parse_args()
os_name = None
if args.os_name is not None:
    os_name = [args.os_name]

if socket.gethostname() == 'globuscvs':
    gid = grp.getgrnam('globdev').gr_gid
    if os.getgid() != gid:
        print "Run newgrp globdev before running this script"
        exit(1)
    os.umask(02)
    repo.gid = gid

repo.setup_gpg_agent()

releases = [args.from_release, args.to_release]

print "===================="
print "Parsing repositories"
print "===================="

pkg_managers = dict()
print "Parsing deb"
pkg_managers['deb'] = \
    repo.deb.Manager(root=args.root, releases=releases, use_cache=False, os_names=os_name)
print "Parsing yum"
pkg_managers['yum'] = \
    repo.yum.Manager(root=args.root, releases=releases, use_cache=False, os_names=os_name)
print "Parsing zypper"
pkg_managers['zypper'] = \
    repo.zypper.Manager(root=args.root, releases=releases, use_cache=False, os_names=os_name)

pdict = dict()
advisories = {}
today = datetime.datetime.now().strftime("%Y-%m-%d")

print "=================="
print "Promoting packages"
print "=================="
for man in pkg_managers:
    print "Promoting %s packages" % man
    manager = pkg_managers[man]
    packages = manager.promote_packages(
            name=args.package, from_release=args.from_release,
            to_release=args.to_release, dryrun=args.dryrun)

    if args.dryrun:
        for p in packages:
            pkey = "-".join([p.name, p.version.strversion])
            if pkey not in pdict:
                pdict[pkey] = set()
            pdict[pkey].add(p.os)
    if args.advisory is not None:
        for p in packages:
            if p.arch == 'src' and p.name not in advisories and \
                    ".src.rpm" in p.path:
                pfd = os.popen('rpm -q -p "%s" --changelog' % p.path)
                dateline = pfd.readline()
                changelog = ""
                for l in pfd:
                    if l.startswith("*"):
                        break
                    else:
                        if l.startswith("- "):
                            l = l.replace("- ", "", 1)
                        changelog += l
                pfd.close()
                changelog = changelog.strip().replace("\n","<br />")
                pfd = os.popen('rpm -q -p "%s" -l' % p.path)
                files = []
                for l in pfd:
                    if ".tar.gz" in l:
                        l = l.replace(".tar.gz", "").strip()
                        matches = re.match(l, r"([a-z-]+)(-[0-9.]+)")
                        if matches is not None:
                            l = matches.group(1).replace("-", "_") + \
                                matches.group(2)
                        files.append(l.replace(".tar.gz", "").strip())
                pfd.close()
                if len(files) > 0:
                    advisories[p.name] = "%s;%s;6.0;bug;%s\n" % (today, ",".join(files), changelog)

if args.dryrun:
    print "===================="
    print "Promotion candidates"
    print "===================="
    for p in pdict:
        print p, "to [", ", ".join(pdict[p]), "]"

if args.package is None:
    print "============================="
    print "Parsing installers repository"
    print "============================="
    manager = repo.installers.Manager(
            root=args.root)
    print "===================="
    print "Promoting installers"
    print "===================="
    installers = manager.promote_packages(from_release=args.from_release,
            to_release=args.to_release, dryrun=args.dryrun)
    if args.dryrun:
        print "===================="
        print "Promotion candidates"
        print "===================="
        print "\n".join([(os.path.basename(p.path) + " to " + p.os) for p in installers])

if args.advisory is not None:
    sorted_advisories = [advisories[a] for a in advisories]
    sorted_advisories.sort()
    if args.dryrun or args.advisory == '-':
        for a in sorted_advisories:
            print a,
    else:
        f = open(args.advisory, "a")
        for a in sorted_advisories:
            f.write(a)
        f.close()

